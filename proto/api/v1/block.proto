syntax = "proto3";

package api.v1;

option go_package = "github.com/syjn99/leanView/backend/gen/proto/api/v1;apiv1";

// BlockService handles all block-related API requests
service BlockService {
  // Get the latest block header from the head cache
  rpc GetLatestBlockHeader(GetLatestBlockHeaderRequest) returns (GetLatestBlockHeaderResponse);
  
  // Get multiple block headers with pagination
  rpc GetBlockHeaders(GetBlockHeadersRequest) returns (GetBlockHeadersResponse);
}

// --- Core Messages ---

// BlockHeader represents essential block information
message BlockHeader {
  uint64 slot = 1;
  uint64 proposer_index = 2;
  string parent_root = 3;    // Hex encoded
  string state_root = 4;     // Hex encoded  
  string body_root = 5;      // Hex encoded
}

// --- Request/Response Messages ---

// GetLatestBlockHeaderRequest - fetch header of the current head block
message GetLatestBlockHeaderRequest {
  // Empty - always returns the current head
}

message GetLatestBlockHeaderResponse {
  BlockHeader block_header = 1;
  string block_root = 2;
}

// --- Paginated Block Headers ---

// Request for paginated block headers
message GetBlockHeadersRequest {
  uint32 limit = 1;     // Max headers to return (default: 50, max: 100)
  uint64 offset = 2;    // Slot number offset for pagination
  
  enum SortOrder {
    SLOT_DESC = 0;      // Latest first (default)
    SLOT_ASC = 1;       // Oldest first
  }
  SortOrder sort_order = 3;
}

// Response with paginated block headers
message GetBlockHeadersResponse {
  repeated BlockHeaderWithRoot headers = 1;
  uint32 total_count = 2;        // Total headers in database
  bool has_more = 3;              // More data available
  uint64 next_offset = 4;         // Next offset for pagination
}

// Block header with computed root
message BlockHeaderWithRoot {
  BlockHeader header = 1;
  string block_root = 2;          // Hex encoded with 0x prefix
}
